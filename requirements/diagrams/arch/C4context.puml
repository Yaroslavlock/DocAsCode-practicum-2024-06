@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Person(manager, "Менеджер", "Создает новые продукты через модуль")
Person(customer, "Клиент", "Размещает заказы через приложение")
Person(marketer, "Маркетолог", "Управляет кампаниями для новых продуктов")
Person(admin, "Администратор", "Мониторит и управляет безопасностью системы")

System_Boundary(system, "Сеть закусочных 'Замысловатость'") {
    System(orderSystem, "Система управления заказами", "Поддерживает до 5000 заказов одновременно, подписывается на InventoryUpdated")
    System(newProductModule, "Модуль создания нового продукта", "Создает продукты, шифрует данные через TLS 1.3, публикует ProductCreated")
    System(warehouseSystem, "Система управления складом", "Проверяет ингредиенты, поддерживает кэширование данных")
    System(marketingSystem, "Маркетинговая система", "Создает кампании, подписывается на ProductCreated, публикует CampaignLaunched")
    System(dataAnalyticsSystem, "Система аналитики данных", "Анализирует до 1 ТБ данных в сутки, подписывается на события")
    System(securitySystem, "Система безопасности", "Аудит действий, логирует все события")
    System(eventBroker, "Брокер событий (Kafka / RabbitMQ)", "Обрабатывает до 10 000 событий/с, поддерживает Dead Letter Queue")
}

Rel(manager, newProductModule, "Создает новые продукты", "HTTPS")
Rel(customer, orderSystem, "Размещает заказы", "HTTPS")
Rel(admin, securitySystem, "Мониторит систему", "HTTPS / REST API")
Rel(newProductModule, eventBroker, "Публикует ProductCreated", "Event (TLS 1.3)")
Rel(eventBroker, warehouseSystem, "Доставляет ProductCreated", "Event")
Rel(eventBroker, marketingSystem, "Доставляет ProductCreated", "Event")
Rel(eventBroker, orderSystem, "Доставляет ProductCreated", "Event")
Rel(eventBroker, dataAnalyticsSystem, "Передает данные для аналитики", "Event")
Rel(securitySystem, eventBroker, "Мониторит события", "Event")
@enduml